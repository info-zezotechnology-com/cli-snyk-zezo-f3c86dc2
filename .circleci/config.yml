version: '2.1'

orbs:
  prodsec: snyk/prodsec-orb@1.0
  snyk: snyk/snyk@1.7.0
  go: circleci/go@1.7.1
  win: circleci/windows@5.0
  aws-cli: circleci/aws-cli@2.0.3
  gh: circleci/github-cli@2.1.0

executors:
  alpine:
    docker:
      - image: alpine:3.17
  docker-amd64:
    docker:
      - image: bastiandoetsch209/cli-build:20230806-080507
    working_directory: /mnt/ramdisk/snyk
    resource_class: large
  docker-arm64:
    docker:
      - image: bastiandoetsch209/cli-build-arm64:20230806-080507
    working_directory: /mnt/ramdisk/snyk
    resource_class: arm.large
  linux-amd64:
    machine:
      image: ubuntu-2204:2023.02.1
    working_directory: /mnt/ramdisk/snyk
    resource_class: large
  linux-ubuntu-mantic-amd64:
    docker:
      - image: ubuntu:mantic
    working_directory: /mnt/ramdisk/snyk
    resource_class: medium
  linux-ubuntu-jammy-amd64:
    docker:
      - image: ubuntu:jammy
    working_directory: /mnt/ramdisk/snyk
    resource_class: medium
  linux-ubuntu-focal-amd64:
    docker:
      - image: ubuntu:focal
    working_directory: /mnt/ramdisk/snyk
    resource_class: medium
  linux-ubuntu-latest-amd64:
    docker:
      - image: ubuntu:latest
    working_directory: /mnt/ramdisk/snyk
    resource_class: medium
  linux-ubuntu-latest-arm64:
    docker:
      - image: ubuntu:latest
    working_directory: /mnt/ramdisk/snyk
    resource_class: arm.medium
  linux-ubuntu-mantic-arm64:
    docker:
      - image: ubuntu:mantic
    working_directory: /mnt/ramdisk/snyk
    resource_class: arm.medium
  linux-ubuntu-jammy-arm64:
    docker:
      - image: ubuntu:jammy
    working_directory: /mnt/ramdisk/snyk
    resource_class: arm.medium
  linux-ubuntu-focal-arm64:
    docker:
      - image: ubuntu:focal
    working_directory: /mnt/ramdisk/snyk
    resource_class: arm.medium
  macos-amd64:
    macos:
      # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: '14.3.1'
    resource_class: macos.x86.medium.gen2
  macos-arm64:
    macos:
      # https://circleci.com/docs/2.0/testing-ios/#supported-xcode-versions
      xcode: '14.3.1'
    resource_class: macos.m1.large.gen1

commands:
  install-deps-windows-full:
    steps:
      - restore_cache:
          name: Restoring Chocolatey cache
          keys:
            - chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
      - run:
          name: Install Windows dependencies
          shell: bash.exe
          command: |
            choco uninstall nodejs -y
            choco uninstall nodejs.install -y
            choco install .circleci/chocolatey.config --no-progress -y
            choco install nodejs --version=$(head .nvmrc) --no-progress -y
      - save_cache:
          name: Saving Chocolatey cache
          key: chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
          paths:
            - ~\AppData\Local\Temp\chocolatey

  install-deps-windows-make:
    steps:
      - restore_cache:
          name: Restoring Chocolatey cache
          keys:
            - chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
      - run:
          name: Install Windows dependencies
          shell: bash.exe
          command: |
            choco install make --no-progress -y
      - save_cache:
          name: Saving Chocolatey cache
          key: chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
          paths:
            - ~\AppData\Local\Temp\chocolatey

  install-deps-windows-node:
    steps:
      - restore_cache:
          name: Restoring Chocolatey cache
          keys:
            - chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
      - run:
          name: Install Windows dependencies
          shell: bash.exe
          command: |
            choco uninstall nodejs -y
            choco uninstall nodejs.install -y
            choco install nodejs --version=$(head .nvmrc) --no-progress -y
      - save_cache:
          name: Saving Chocolatey cache
          key: chocolatey-cache-v2-{{ arch }}-{{ checksum ".circleci/chocolatey.config" }}
          paths:
            - ~\AppData\Local\Temp\chocolatey

  install-deps-noop:
    steps:
      - run:
          name: No dependencies to install
          command: echo all done!

  failed-release-notification:
    steps:
      - run:
          name: Handling failed release
          command: bash ./release-scripts/handle-failed-release.sh
          when: on_fail

  prepare-workspace:
    parameters:
      executor:
        type: string
        default: linux-base-edge-amd64
    steps:
      - checkout
      - attach_workspace:
          at: .

parameters:
  go_version:
    type: string
    # https://go.dev/doc/devel/release
    default: '1.20.6'
  aws_version:
    type: string
    # https://github.com/aws/aws-cli/blob/v2/CHANGELOG.rst
    default: '2.4.12'
  gh_version:
    type: string
    # https://github.com/cli/cli/releases
    default: '2.7.0'

####################################################################################################
# WORKFLOWS
####################################################################################################

workflows:
  version: 2
  test_and_release:
    jobs:
      - prodsec/secrets-scan:
          name: secrets-scan
          context: snyk-bot-slack
          channel: hammerhead-alerts

      - prepare-build:
          requires:
            - secrets-scan

      - code-analysis:
          context: hammerhead-snyk-orb-snyk-creds
          requires:
            - prepare-build
          filters:
            branches:
              ignore: master

      - test-code:
          context:
            - nodejs-install
            - team_hammerhead-cli
          requires:
            - prepare-build
          filters:
            branches:
              ignore: master

      - build-special-artifacts:
          name: build fix & protect
          requires:
            - prepare-build

      - build-artifact:
          name: build linux amd64
          go_os: linux
          go_arch: amd64
          executor: docker-amd64
          artifact: snyk-linux
          requires:
            - prepare-build

      - build-artifact:
          name: build linux arm64
          go_os: linux
          go_arch: arm64
          executor: docker-arm64
          artifact: snyk-linux-arm64
          requires:
            - prepare-build

      - build-artifact:
          name: build alpine amd64
          go_os: alpine
          go_arch: amd64
          executor: docker-amd64
          artifact: snyk-alpine
          c_compiler: /usr/bin/musl-gcc
          requires:
            - prepare-build

      - build-artifact:
          name: build macOS amd64
          go_os: darwin
          go_arch: amd64
          executor: macos-amd64
          artifact: snyk-macos
          requires:
            - prepare-build

      - build-windows-artifact:
          context: snyk-windows-signing
          name: build windows amd64
          go_os: windows
          go_arch: amd64
          requires:
            - prepare-build

      - regression-tests:
          name: regression-tests
          context: nodejs-install
          filters:
            branches:
              ignore: master
          requires:
            - build linux amd64
          test_snyk_command: /mnt/ramdisk/snyk/binary-releases/snyk-linux

      - acceptance-tests-linux:
          name: acceptance-tests linux amd64
          context:
            - nodejs-install
            - team_hammerhead-cli
          filters:
            branches:
              ignore: master
          requires:
            - build linux amd64
          executor: docker-amd64
          test_snyk_command: /mnt/ramdisk/snyk/binary-releases/snyk-linux

      - acceptance-tests-linux:
          name: acceptance-tests linux arm64
          context:
            - nodejs-install
            - team_hammerhead-cli
          filters:
            branches:
              ignore: master
          requires:
            - build linux arm64
          executor: docker-arm64
          test_snyk_command: /mnt/ramdisk/snyk/binary-releases/snyk-linux-arm64

      - acceptance-tests-linux:
          name: acceptance-tests alpine amd64
          context:
            - nodejs-install
            - team_hammerhead-cli
          filters:
            branches:
              ignore: master
          requires:
            - build alpine amd64
          executor: docker-amd64
          test_snyk_command: /mnt/ramdisk/snyk/binary-releases/snyk-alpine

      - acceptance-tests-macos:
          name: acceptance-tests macOS amd64
          context:
            - nodejs-install
            - team_hammerhead-cli
          filters:
            branches:
              ignore: master
          requires:
            - build macOS amd64
          executor: macos-amd64
          test_snyk_command: /Users/distiller/snyk/binary-releases/snyk-macos

      - acceptance-tests-windows:
          name: acceptance-tests windows amd64
          context:
            - nodejs-install
            - team_hammerhead-cli
          filters:
            branches:
              ignore: master
          requires:
            - build windows amd64
          test_snyk_command: binary-releases\\snyk-win.exe

      - sign:
          name: sign windows amd64
          context: snyk-windows-signing
          requires:
            - build windows amd64
          go_os: windows
          go_arch: amd64
          executor: win/default
          install_deps_extension: windows-make
          filters:
            branches:
              only: master

      - sign:
          name: sign macos amd64
          context: snyk-macos-signing
          requires:
            - build macOS amd64
          go_os: darwin
          go_arch: amd64
          executor: macos-amd64
          install_deps_extension: noop
          filters:
            branches:
              only: master

      - create_deployment_artifacts:
          name: create deployment artifacts
          context: snyk-cli-pgp-signing
          requires:
            - sign macos amd64
            - sign windows amd64
            - build alpine amd64
            - build linux amd64
            - build linux arm64
            - build fix & protect
          filters:
            branches:
              only: master

      - should-release:
          name: release?
          type: approval
          requires:
            - create deployment artifacts
          filters:
            branches:
              only: master

      - pre-release:
          name: upload version
          context: team-hammerhead-common-deploy-tokens
          requires:
            - release?
          filters:
            branches:
              only: master

      - npm-validation:
          name: Validate NPM artifacts (<< matrix.executor >>)
          context: team_hammerhead-cli
          matrix:
            parameters:
              executor:
                - 'docker-amd64'
                - 'win/server-2019'
                - 'macos-amd64'
          requires:
            - upload version
          filters:
            branches:
              only: master

      - test-release:
          name: e2e tests (<< matrix.executor >>)
          context: team_hammerhead-cli
          matrix:
            parameters:
              executor:
                - 'docker-amd64'
                - 'docker-arm64'
                - 'win/server-2019'
                - 'win/server-2022'
                - 'macos-amd64'
                - 'linux-ubuntu-latest-amd64'
                - 'linux-ubuntu-mantic-amd64'
                - 'linux-ubuntu-jammy-amd64'
                - 'linux-ubuntu-focal-amd64'
                - 'linux-ubuntu-latest-arm64'
                - 'linux-ubuntu-mantic-arm64'
                - 'linux-ubuntu-jammy-arm64'
                - 'linux-ubuntu-focal-arm64'
                - 'alpine'
          requires:
            - upload version
          filters:
            branches:
              only: master

      - release-s3:
          name: upload latest
          context: team-hammerhead-common-deploy-tokens
          requires:
            - Validate NPM artifacts (docker-amd64)
            - Validate NPM artifacts (win/server-2019)
            - Validate NPM artifacts (macos-amd64)
            - e2e tests (docker-amd64)
            - e2e tests (docker-arm64)
            - e2e tests (win/server-2019)
            - e2e tests (win/server-2022)
            - e2e tests (macos-amd64)
            - e2e tests (linux-ubuntu-latest-amd64)
            - e2e tests (linux-ubuntu-mantic-amd64)
            - e2e tests (linux-ubuntu-jammy-amd64)
            - e2e tests (linux-ubuntu-focal-amd64)
            - e2e tests (linux-ubuntu-latest-arm64)
            - e2e tests (linux-ubuntu-mantic-arm64)
            - e2e tests (linux-ubuntu-jammy-arm64)
            - e2e tests (linux-ubuntu-focal-arm64)
            - e2e tests (alpine)
          filters:
            branches:
              only: master

      - release-github:
          name: upload github
          context: team-hammerhead-common-deploy-tokens
          requires:
            - upload latest
          filters:
            branches:
              only:
                - master
      - release-npm:
          name: upload npm
          context: team-hammerhead-common-deploy-tokens
          requires:
            - upload github
          filters:
            branches:
              only:
                - master

####################################################################################################
# JOBS
####################################################################################################

jobs:
  prepare-build:
    executor: docker-amd64
    steps:
      - checkout
      - run:
          name: Installing dependencies
          command: npm ci
      - run:
          name: Set version
          command: make binary-releases/version
      - run:
          # required for one unit test (ts-binary-wrapper/test/unit/common.spec.ts:15:30)
          # consider removing this run
          name: Pre-Build
          command: make pre-build
      - run:
          name: Build TypeScript CLI
          command: npm run build:prod
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases/*
            - node_modules/*
            - ts-binary-wrapper/*
            - dist/*
            - packages/*

  code-analysis:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Linting project
          command: |
            npm run lint
            pushd cliv2 
              make lint configure
            popd
      - snyk/scan:
          fail-on-issues: true
          severity-threshold: critical
          additional-arguments: --all-projects --exclude=test,dist
      - snyk/scan:
          command: code test
          fail-on-issues: true
          monitor-on-build: false
          severity-threshold: high

  test-code:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Configuring artifact
          command: node ./bin/snyk config set "api=${TEST_SNYK_TOKEN}" # many tests require the token to be in the config
      - run:
          name: Running TS unit tests
          command: npm run test:unit
      - run:
          name: Running Go unit tests
          working_directory: ./cliv2
          command: make configure whiteboxtest
      - run:
          name: Running Tap tests
          command:
            npx tap -Rspec --timeout=300 --node-arg=-r --node-arg=ts-node/register \
            $(circleci tests glob "test/tap/*.test.*" | circleci tests split --split-by=timings)

  build-special-artifacts:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Building snyk-fix.tgz
          command: make binary-releases/snyk-fix.tgz
      - run:
          name: Building snyk-protect.tgz
          command: make binary-releases/snyk-protect.tgz
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases/snyk-fix.tgz
            - binary-releases/snyk-protect.tgz

  build-windows-artifact:
    parameters:
      go_os:
        type: string
      go_arch:
        type: string
    executor:
      name: win/default
      size: large
    steps:
      - prepare-workspace
      - install-deps-windows-full
      - run:
          name: Build Windows
          shell: powershell
          command: make build GOOS=windows GOARCH=amd64
          environment:
            CGO_ENABLED: 1
      - store_artifacts:
          path: binary-releases
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases/snyk-*
            - binary-releases/version

  build-artifact:
    parameters:
      go_os:
        type: string
      go_arch:
        type: string
      c_compiler:
        type: string
        default: ''
      executor:
        type: string
      artifact:
        type: string
    executor: << parameters.executor >>
    environment:
      HOSTTYPE: << parameters.go_arch >>
    steps:
      - prepare-workspace
      - go/install:
          version: << pipeline.parameters.go_version >>
      - restore_cache:
          key: go-build-{{ arch }}-{{ checksum "cliv2/go.sum" }}
      - run:
          name: Build << parameters.go_os >>/<< parameters.go_arch >>
          environment:
            CC: << parameters.c_compiler >>
            CGO_ENABLED: 1
          command: make build GOOS=<< parameters.go_os >> GOARCH=<< parameters.go_arch >>
      - save_cache:
          key: go-build-{{ arch }}-{{ checksum "cliv2/go.sum" }}
          paths: [/home/circleci/go/pkg/mod]
      - store_artifacts:
          path: binary-releases
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases/snyk-*

  acceptance-tests-linux:
    parameters:
      test_snyk_command:
        type: string
      executor:
        type: string
    executor: << parameters.executor >>
    steps:
      - prepare-workspace
      - run:
          name: Configuring artifact
          command: << parameters.test_snyk_command >> config set "api=${TEST_SNYK_TOKEN}" # many tests require the token to be in the config
      - run:
          name: Running acceptance tests
          command: npm run test:acceptance -- --selectProjects snyk
          environment:
            TEST_SNYK_COMMAND: << parameters.test_snyk_command >>
            TEST_SNYK_DONT_SKIP_ANYTHING: 1

  acceptance-tests-macos:
    working_directory: /Users/distiller/snyk
    environment:
      HOMEBREW_NO_AUTO_UPDATE: 1
    parameters:
      test_snyk_command:
        type: string
      executor:
        type: string
      items:
        type: string
        default: go gradle python elixir composer gradle@6 maven sbt dotnet
    executor: << parameters.executor >>
    steps:
      - prepare-workspace
      - restore_cache:
          key: acceptance-tests-macos-<< parameters.items >>
      - run:
          name: Installing sdks and tools via homebrew
          command: |
            brew install << parameters.items >>
      - save_cache:
          key: acceptance-tests-macos-<< parameters.items >>
          paths:
            - ~/Library/Caches/Homebrew
      - run:
          name: Configuring artifact
          command: << parameters.test_snyk_command >> config set "api=${TEST_SNYK_TOKEN}" # many tests require the token to be in the config
      - run:
          name: Running acceptance tests
          command: npm run test:acceptance -- --selectProjects snyk
          environment:
            TEST_SNYK_COMMAND: << parameters.test_snyk_command >>
            TEST_SNYK_DONT_SKIP_ANYTHING: 1

  acceptance-tests-windows:
    parameters:
      test_snyk_command:
        type: string
    executor:
      name: win/default
      size: large
    steps:
      - prepare-workspace
      - install-deps-windows-full
      - run:
          name: Configuring artifact
          command: << parameters.test_snyk_command >> config set "api=$env:TEST_SNYK_TOKEN" # many tests require the token to be in the config
      - run:
          name: Running acceptance tests
          command: |
            Import-Module $env:ChocolateyInstall\helpers\chocolateyProfile.psm1
            RefreshEnv
            npm install
            npm run test:acceptance -- --selectProjects snyk
          environment:
            TEST_SNYK_COMMAND: << parameters.test_snyk_command >>

  regression-tests:
    parameters:
      test_snyk_command:
        type: string
        default: /mnt/ramdisk/snyk/binary-files/snyk-linux
    executor: docker-amd64
    working_directory: /mnt/ramdisk/snyk
    steps:
      - prepare-workspace
      - run:
          name: Install ShellSpec Deps
          command: |
            ./test/smoke/install-shellspec.sh --yes
            sudo ln -s ~/.local/lib/shellspec/shellspec /usr/local/bin/shellspec
      - run:
          name: Installing test fixture dependencies
          working_directory: ./test/fixtures/basic-npm
          command: npm i
      - run:
          name: Installing Snyk CLI
          command: |
            sudo ln -s << parameters.test_snyk_command >> /usr/local/bin/snyk
            snyk --version
      - run:
          name: Running ShellSpec tests
          working_directory: ./test/smoke
          command: |
            echo "Checkout the README in test/smoke folder for more details about this step"
            unset SNYK_API
            unset SNYK_API_KEY
            shellspec -f d -e REGRESSION_TEST=1 -e PIP_BREAK_SYSTEM_PACKAGES=1

  sign:
    parameters:
      go_os:
        type: string
      go_arch:
        type: string
      executor:
        type: string
      install_deps_extension:
        type: string
    executor: << parameters.executor >>
    steps:
      - prepare-workspace
      - install-deps-<< parameters.install_deps_extension >>
      - run:
          name: Signing << parameters.go_os >> artifact
          command: make sign GOOS=<< parameters.go_os >> GOARCH=<< parameters.go_arch >>
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases/snyk-*

  create_deployment_artifacts:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Creating all shasums
          command: find binary-releases -name "snyk-*" -exec make {}.sha256 \;
      - run:
          name: Making TS-Binary-Wrapper (snyk.tgz)
          command: make binary-releases/snyk.tgz
      - run:
          name: Signing all shasums
          command: make binary-releases/sha256sums.txt.asc
      - run:
          name: Making release.json
          command: make binary-releases/release.json
      - run:
          name: Making release notes
          command: make binary-releases/RELEASE_NOTES.md
      - run:
          name: Validating artifacts
          command: ./release-scripts/validate-checksums.sh
      - store_artifacts:
          path: ./binary-releases
      - persist_to_workspace:
          root: .
          paths:
            - binary-releases/sha256sums.txt.asc
            - binary-releases/release.json
            - binary-releases/RELEASE_NOTES.md
            - binary-releases/snyk.tgz
            - binary-releases/snyk-*.sha256

  pre-release:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - gh/setup:
          token: HAMMERHEAD_GITHUB_PAT
          version: << pipeline.parameters.gh_version >>
      - aws-cli/install:
          version: << pipeline.parameters.aws_version >>
      - run:
          name: Pre-Publishing
          command: make release-pre
      - failed-release-notification

  npm-validation:
    parameters:
      executor:
        type: string
    executor: << parameters.executor >>
    steps:
      - prepare-workspace
      - run:
          name: Validating NPM artifacts
          command: bash ./release-scripts/validate-npm-artifacts.sh
      - failed-release-notification

  test-release:
    parameters:
      executor:
        type: string
    executor: << parameters.executor >>
    steps:
      - prepare-workspace
      - when:
          condition:
            matches:
              pattern: '^macos.*'
              value: << parameters.executor >>
          steps:
            - run: brew install coreutils curl python3
      - when:
          condition:
            matches:
              pattern: '^alpine'
              value: << parameters.executor >>
          steps:
            - run: apk add python3 py3-pip bash
      - when:
          condition:
            matches:
              pattern: '^linux.*'
              value: << parameters.executor >>
          steps:
            - run: apt update && apt install -y sudo curl python3 python3-pip python3-requests

      - run:
          name: Checking Snyk CLI
          shell: bash
          command: |
            PIP_BREAK_SYSTEM_PACKAGES=1 pip install --user --upgrade requests || PIP_BREAK_SYSTEM_PACKAGES=1 pip3 install --user --upgrade requests 
            python scripts/install-snyk.py $(cat binary-releases/version) || python3 scripts/install-snyk.py $(cat binary-releases/version)

  release-s3:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - aws-cli/install:
          version: << pipeline.parameters.aws_version >>
      - run:
          name: Publish to S3
          command: ./release-scripts/upload-artifacts.sh latest
      - failed-release-notification

  release-github:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - gh/setup:
          token: HAMMERHEAD_GITHUB_PAT
          version: << pipeline.parameters.gh_version >>
      - run:
          name: Publish to GitHub
          command: ./release-scripts/upload-artifacts.sh github
      - failed-release-notification

  release-npm:
    executor: docker-amd64
    steps:
      - prepare-workspace
      - run:
          name: Publish to npm
          command: ./release-scripts/upload-artifacts.sh npm
      - failed-release-notification
